#!/usr/bin/env python
# Copyright 2013 Johan Rydberg. -*- python -*-
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This is a simple script that starts the container using lxc-start.
The output from lxc-start is attached to a running instance of the
'logger' command.

Note that this could have been a simple shell script (lxc-start piped
into logger) but I never got it working for some reason.  This seem to
work though.
"""

from gevent.event import Event, AsyncResult
from gevent import subprocess
import gevent
import signal
import sys
import os
import functools


TERM_TIMEOUT = 10


def waitany(objects, timeout=None):
    """Wait for that any of the objects are triggered."""
    result = AsyncResult()
    for obj in objects:
        obj.rawlink(result.set)
    try:
        return result.get(timeout=timeout)
    finally:
        for obj in objects:
            unlink = getattr(obj, 'unlink', None)
            if unlink:
                try:
                    unlink(result.set)
                except:
                    raise


def _terminate(process, timeout):
    """Terminate the given process by sending it SIGTERM.

    If it has not died withing C{timeout} seconds, kill it with
    SIGKILL.
    """
    try:
        process.terminate()
        try:
            process.result.get(timeout=timeout)
        except gevent.Timeout:
            process.kill()
    except OSError:
        # The thing has most likely already exited (it crashed and
        # burned?).
        pass


def async(f):
    @functools.wraps(f)
    def wrapped(*args, **kw):
        return gevent.spawn(f, *args, **kw)
    return wrapped


class Runner(object):
    """The runner is responsible for starting the "lxc-start" command
    and monitoring the process.
    """

    def __init__(self, name, logtag, interval=1):
        self.logtag = logtag
        self.name = name
        self._term_event = Event()
        self._read, self._write = os.pipe()
        self._interval = interval

    @async
    def _stop(self, *event):
        """Stop the container."""
        if self.runner.returncode is None:
            subprocess.call(['lxc-kill', '-n', self.name, 
                             str(signal.SIGTERM)])
            try:
                self.runner.result.get(timeout=TERM_TIMEOUT)
            except gevent.Timeout:
                subprocess.call(['lxc-stop', '-n', self.name])

    def _init(self):
        gevent.signal(signal.SIGTERM, self._stop)
        gevent.signal(signal.SIGINT, self._stop)

    def start(self, *args):
        self._init()
        self.logger = subprocess.Popen(['logger', '-t', self.logtag],
                                       stdin=self._read)
        self.runner = subprocess.Popen(args,
                                       stdout=self._write,
                                       stderr=subprocess.STDOUT,
                                       close_fds=True)

    def monitor(self):
        """Monitor the executed program."""
        event = waitany([self.logger.result, 
                         self.runner.result])
        if event is not self.runner.result:
            self._stop().get()
        if event is not self.logger.result:
            _terminate(self.logger, TERM_TIMEOUT)
        return self.runner.returncode


if __name__ == '__main__':
    name, app, procname = sys.argv[1:]
    runner = Runner(name, '%s[%s]' % (app, procname))
    runner.start('lxc-start', '-n', name)
    sys.exit(runner.monitor())
